version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.9
jobs:
  deploy_front_end_infra:
    working_directory: /app
    docker:
        - image: docker:17.05.0-ce-git
    steps:
        - checkout
        - run:
            name: Install Dependencies
            command: |
              apk add --no-cache \
                  py-pip=9.0.0-r1
              pip install \
                  docker-compose==1.12.0 \
                  awscli==1.16.113
        - run:
            name: Configure AWS CLI to Run as Admin
            command: |
                aws configure set aws_access_key_id $adminAccessKey
                aws configure set aws_secret_access_key $adminSecretAccessKey
                aws configure set default.region us-east-1
        - run:
            name: Deploy Lawn Nanny Frontend Stack
            command: |
             DomainParentHostedZoneID=$(aws route53 list-hosted-zones-by-name --query "(HostedZones[?Name=='lawnnanny.com.'])[0].Id" --output text)
              CertificateArn=$(aws acm list-certificates --query "(CertificateSummaryList[?DomainName=='*.lawnnanny.com'])[0].CertificateArn" --output text)
             aws cloudformation deploy --template-file lawnNannyFrontendStack.yaml --stack-name LawnNannyFrontendStack --no-fail-on-empty-changeset --parameter-overrides BucketNameOfFrontendDeployment=${FrontendDeploymentS3} DomainName=www.lawnnanny.com HostedZoneId=${DomainParentHostedZoneID} AcmCertificate=${CertificateArn}
            no_output_timeout: 1h

  deploy_code_react_to_cloud_front:
      working_directory: ~/app
      docker:
          - image: circleci/node:8.11.0
      steps:
          - checkout
          - run:
              name: Clone React Repo
              command: |
                git clone https://github.com/lawnnanny/LawnNannyWeb.git
          - run:
              name: update-npm
              command: 'sudo npm install -g npm@latest'
          - run:
              name: Install Dependencies
              command: |
                cd LawnNannyWeb
                npm install --only=dev
                npm install
          - run:
              name: Added domainRequests.json
              command: |
                touch ./LawnNannyWeb/src/domainRequests.json
                echo "{}" >> ./LawnNannyWeb/src/domainRequests.json
          - run:
              name: Unit Tests For React
              command: |
                cd LawnNannyWeb && npm run test
          - run:
              name: Build React
              command: |
                cd LawnNannyWeb && npm run build
          - run:
              name: Install AWS CLI
              command: |
                sudo apt-get -y -qq install awscli
          - run:
              name: Configure AWS CLI to Run as Admin
              command: |
                  aws configure set aws_access_key_id $adminAccessKey
                  aws configure set aws_secret_access_key $adminSecretAccessKey
                  aws configure set default.region us-east-1
          - run:
              name: Ship Build File To S3 Bucket
              command: |
                 aws configure set aws_access_key_id $adminAccessKey
                 aws configure set aws_secret_access_key $adminSecretAccessKey
                 aws configure set default.region us-east-1
                 cd LawnNannyWeb
                 echo $FrontendDeploymentS3
                 aws s3 mv ./build s3://${FrontendDeploymentS3} --recursive --acl public-read-write

  deploy_ecs_api_lambda_infra:
      working_directory: ~/app
      docker:
          - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      environment:
          SBT_VERSION: 1.0.4
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              sudo apt install python-pip
              sudo apt-get install -y curl
              sudo apt-get update
              sudo pip install awscli
        - run:
            name: Configure AWS CLI To Run As Admin Role
            command: |
              aws configure set aws_access_key_id $adminAccessKey
              aws configure set aws_secret_access_key $adminSecretAccessKey
              aws configure set default.region us-east-1
        - run:
            name: Deploy API stack
            command: aws cloudformation deploy --template-file cloudFormationLambda.yaml --capabilities CAPABILITY_IAM --stack-name APIStack --no-fail-on-empty-changeset --parameter-overrides LambdaS3BucketName=${LambdaS3BucketName}
            no_output_timeout: 30m

  deploy_ecs_api_lambdas:
      working_directory: ~/app
      docker:
          - image: openjdk:8
      environment:
          SBT_VERSION: 1.0.4
      steps:
          - checkout
          - run:
              name: Create S3 Bucket For Code
              command: |
                ./createLambdaBucket.sh $LambdaS3BucketName
          - run:
              name: Get sbt binary
              command: |
                apt update && apt install -y curl
                curl -L -o sbt-$SBT_VERSION.deb https://dl.bintray.com/sbt/debian/sbt-$SBT_VERSION.deb
                dpkg -i sbt-$SBT_VERSION.deb
                rm sbt-$SBT_VERSION.deb
                apt-get update
                apt-get install -y sbt python-pip git
                pip install awscli
                apt-get clean && apt-get autoclean
          - run:
              name: Checkout the Code
              command: |
                git clone https://github.com/lawnnanny/LawnnannyRegistrationLoginAPI.git
          - run:
              name: Checkout The Correct Branch
              command: |
                cd LawnnannyRegistrationLoginAPI
                git checkout ${gitBranch}
          - run:
              name: Add AWS.json config file
              command: |
                cd LawnnannyRegistrationLoginAPI
                JSON_STRING='{"AWS_ACCESS_KEY":"'"$AWS_ACCESS_KEY"'","SECRET_AWS_ACCESS_KEY":"'"$SECRET_AWS_ACCESS_KEY"'","REGION":"'"$REGION"'"}'
                echo "" > ./src/main/resources/AWS.json
                echo $JSON_STRING > src/main/resources/AWS.json
          - run:
              name: Add UserSessionConfig.json config file
              command: |
                cd LawnnannyRegistrationLoginAPI
                JSON_STRING='{"EXPIRATION_FOR_SESSION": '${EXPIRATION_FOR_SESSION}',"SECRET_KEY":"'"$SECRET_KEY"'"}'
                echo "" > ./src/main/resources/UserSessionConfig.json
                echo $JSON_STRING > src/main/resources/UserSessionConfig.json
          - run:
              name: Assemble The Jar
              command: |
                cd LawnnannyRegistrationLoginAPI
                sbt assembly
          - run:
              name: Configure AWS CLI To Run As Admin Role
              command: |
                aws configure set aws_access_key_id $adminAccessKey
                aws configure set aws_secret_access_key $adminSecretAccessKey
                aws configure set default.region us-east-1
          - run:
              name: Ship Jar to S3 Bucket
              command: |
                cd LawnnannyRegistrationLoginAPI
                echo $LambdaS3BucketName
                aws s3 mv ./target/scala-2.12/lambda.jar s3://${LambdaS3BucketName} --acl public-read-write
          - run:
              name: Create custom domain name if necessary
              command: ./createCustomDomainName.sh lawnnanny.com. lambddas.lawnnanny.com lambddas.lawnnanny.com
              no_output_timeout: 30m
workflows:
    version: 2
    build_and_test:
        jobs:
            - deploy_front_end_infra
            - deploy_ecs_api_lambdas
            - deploy_code_react_to_cloud_front:
                requires:
                  - deploy_front_end_infra
            - deploy_ecs_api_lambda_infra:
                requires:
                    - deploy_ecs_api_lambdas
