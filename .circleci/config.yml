version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.9
jobs:
  deploy_aws_cloud_formation:
      working_directory: /app
      docker:
          - image: docker:17.05.0-ce-git
      steps:
          - checkout
          - run:
              name: Install Dependencies
              command: |
                apk add --no-cache \
                    py-pip=9.0.0-r1
                pip install \
                    docker-compose==1.12.0 \
                    awscli==1.16.113
          - run:
              name: Configure AWS CLI To Run As Admin Role
              command: |
                aws configure set aws_access_key_id $adminAccessKey
                aws configure set aws_secret_access_key $adminSecretAccessKey
                aws configure set default.region us-east-1
          - run:
              name: Deploy Cloudformation Stack
              command: aws cloudformation deploy --template-file cloudFormation.yaml --stack-name TerraStack --no-fail-on-empty-changeset
              no_output_timeout: 30m

  deploy_react_to_cloud_front:
      working_directory: ~/app
      docker:
          - image: circleci/node:latest
      steps:
          - run:
              name: Clone React Repo
              command: |
                git clone https://github.com/sdrafahl/TerraWeb.git
          - run:
              name: Install Dependencies
              command: |
                cd TerraWeb && npm install
          - run:
              name: Unit Tests For React
              command: |
                cd TerraWeb && npm run test
          - run:
              name: Build React
              command: |
                cd TerraWeb && npm run build
          - run:
              name: Install AWS CLI
              command: |
                sudo apt-get -y -qq install awscli
          - run:
              name: Ship Build File To S3 Bucket
              command: |
                 cd TerraWeb && aws s3 mv ./build

  deploy_ecs_api_containers:
      working_directory: /app
      docker:
          - image: docker:17.05.0-ce-git
      steps:
          - checkout
          - setup_remote_docker
          - run:
              name: Install Dependencies
              command: |
                apk add --no-cache \
                  py-pip=9.0.0-r1
                pip install \
                  docker-compose==1.12.0 \
                  awscli==1.11.76
          - run:
              name: Create Configuration Files From Build Variables
              command: |
                touch configKeys.json
                echo $googleGeocode > configKeys.json
                touch passwords.json
                echo {"database":$databasePassword} > passwords.json
          - run:
              name: Build Application Docker Image
              command: |
                docker-compose build
          - run:
              name: Build Docker Container for Testing
              command: |
                docker-compose -f docker-compose.test.repo.yml build
          - run:
              name: Start Docker Container for Testing
              command: |
                docker-compose -f docker-compose.test.repo.yml up --abort-on-container-exit --exit-code-from sut
          - run:
              name: Start Docker Container for Testing
              command: |
                docker-compose -f docker-compose.test.repo.yml up --abort-on-container-exit --exit-code-from sut
          - run: docker images
          - deploy:
              name: Push Application Docker Image
              command: |
                if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  login="$(aws ecr get-login)"
                  ${login}
                  docker tag app_web ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com/terra-repo
                  docker push ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com/terra-repo
                fi

workflows:
    version: 2
    build_and_test:
        jobs:
            - deploy_aws_cloud_formation
            - deploy_react_to_cloud_front:
                requires:
                    - deploy_aws_cloud_formation
            - deploy_ecs_api_containers:
                requires:
                    - deploy_aws_cloud_formation
